Architecture
============

The docknv architecture is composed of three superposed layers.
Each layer allows special commands and behaviors.

  - Service
  - Schema
  - Configuration

1. Service layer
~~~~~~~~~~~~~~~~

The **service** layer can be considered as a **service entry** in a Docker
Compose file.
It contains **one service, one image**, and it can be linked to **volumes**
and **networks**.

You can define machines by inserting service entries in your *composefiles
(Docker Compose YML files)*.

Definition example:

.. code-block:: yaml

    ipython:
      build: images/ipython
      ports: 8888:8888
      volumes:
        - ipython_notebooks:/data
      networks:
        net:


From the command-line, with the ``service`` command, you can directly
manipulate one service: *start*, *stop*, *restart*, *execute a custom command*,
*drop a shell*, *view logs*, *pushing and pulling a file*, *etc.*

2. Schema layer
~~~~~~~~~~~~~~~

The **schema** layer is composed of multiple services together.
It can actually be considered as a group of service entries in multiple Docker
Compose files.
So, in a schema, there are one or more services, images, volumes and networks.

You can define schemas in the *config.yml* at your project root.

Definition example:

.. code-block:: yaml

    standard:
      services:
        - ipython
      volumes:
        - ipython_notebooks
      networks:
        - net


From the command-line, with the ``schema`` command, you can *list* available
schemas.

3. Configuration layer
~~~~~~~~~~~~~~~~~~~~~~

The **configuration** layer is the link between three components: the
**schema**, the **environment**, and the **namespace**.

The environment contains a variable list, used in template files and injected
in your services.
You can see more about environments in the **Environment** section of the
documentation.

The namespace allow *configuration separation*: you can deploy two schemas in
parallel, without conflicting by prefixing every service by a chosen namespace.

To create a configuration, you have to execute the ``docknv config create``
command.

From the command-line, with the ``config`` command, you can manipulate
configurations: *start*, *stop*, *restart*, *view processes status*, *update*,
*etc.*

Project structure
~~~~~~~~~~~~~~~~~

To use **docknv**, you need to respect the following structure:

-  **commands**: The location of your custom docknv commands. *(optional)*
-  **composefiles**: The location of your Docker Compose files.
-  **data**: Your project data:

   -  **files**: Static files and Jinja2 templates imported via volumes
      should be stored here, with one folder per container
   -  **standard**: Here you can put private files to be imported

-  **envs**: The location of your environment configuration files,
   ending with ``.env.yml`` (example for *debug*, the filename is
   ``debug.env.yml``).
-  **images**: The location of your Docker images, one folder per
   container. You should always use the "building" way (instead of the
   direct fetching) when including new Docker images in your Compose
   files.
-  **config.yml**: The main docknv configuration file for your project.
