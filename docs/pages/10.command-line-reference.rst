Command-line reference
======================

Here you can find the command-line reference.

Each command is described with an example.

**Subcommands**

- *machine*: manage one machine at a time (machine mode)
- *config*: manage groups of machines at once (config mode)
- *bundle*: manage groups of configs at once (bundle mode)
- *env*: manage environments
- *schema*: manage schemas
- *volume*: manage volumes
- *user*: manage user config files
- *scaffold*: scaffolding
- *registry*: start and stop registry


Machine commands
----------------

machine start
+++++++++++++

Start a single machine, in foreground or in background (*-d/--daemon*).

Examples:

.. code-block:: bash

    # Start the `test` machine in foreground
    docknv machine start test

    # Start the `test` machine in background
    docknv machine start test -d # or --daemon


machine stop
++++++++++++

Stop a single machine.

Example:

.. code-block:: bash

    # Stop the `test` machine
    docknv machine stop test


machine restart
+++++++++++++++

Restart a single machine. You can normally restart a machine, in foreground or in background (*-d/--daemon*), and you can force the restart (*-f/--force*).

Force restart will cause a complete `stop` and a complete `start`.

Examples:

.. code-block:: bash

    # Restart the `test` machine in foreground
    docknv machine restart test

    # Restart the `test` machine in background
    docknv machine restart test -d # or --daemon

    # Force restart the `test` machine in background
    docknv machine restart test -f -d # or --force --daemon


machine run
+++++++++++

Run a custom command on a single machine by creating a new container. You can run this command in foreground or in background (*-d/--daemon*).

Examples:

.. code-block:: bash

    # Run a Python HTTP server on machine `test`
    docknv machine run test "python -m http.server"

    # Execute a ping command in background on machine `test`
    docknv machine run test -d "ping www.google.fr"


machine exec
++++++++++++

Execute a custom command on a **running** container. You can disable the TTY (*--no-tty*) and fetch the return code (*-r/--return-code*).

Examples:

.. code-block:: bash

    # List the root folder content on running machine `test`
    docknv machine exec test "bash -c 'ls /'"

    # Sum numbers on machine `test`, and get the return code
    docknv machine exec test --return-code "python -c '5+5'"

    # Execute a ping command on machine `test` and disable TTY
    docknv machine exec test --no-tty "ping www.google.fr"

machine shell
+++++++++++++

Run a shell on a **running** container. You can change the shell executable as a second parameter, and if needed you can *create* the container before running the shell (*-c/--create*).

Examples:

.. code-block:: bash

    # Run a shell (/bin/bash as default) on running machine `test`
    docknv machine shell test

    # Run a custom shell (/bin/zsh) on running machine `test`
    docknv machine shell test /bin/zsh

    # Create the container and run a shell on machine `test`
    docknv machine shell test -c # or --create

machine logs
++++++++++++

View the logs of a **running** container. You can show everything, or get the last lines (*--tail with count parameter*), or even follow the logs (*-f/--follow*).

Examples:

.. code-block:: bash

    # Get complete logs from running machine `test`
    docknv machine logs test

    # Get 10 last lines of logs from running machine `test`
    docknv machine logs test --tail 10

    # Follow the logs from running machine `test`
    docknv machine logs test -f # or --follow

machine push
++++++++++++

Push a file from the host to a **running** container. First, you specify the host path, then the container path.

Example:

.. code-block:: bash

    # Push a sample.txt file to a running machine `test`
    docknv machine push test ./sample.txt /tmp/sample.txt


machine pull
++++++++++++

Pull a file from a **running** container to the host. First, you specify the container path then the host path.

Example:

.. code-block:: bash

    # Pull a sample.txt file from a running machine `test`
    docknv machine pull test /tmp/sample.txt ./sample.txt


machine build
+++++++++++++

Build a machine image. If you have edited the Dockerfile of your image, run this command to rebuild.

The image will automatically be pushed to the local registry, but you can prevent this (*with -d/--do-not-push*). You can also ignore the cache and rebuild everything (*-n/--no-cache*).

Examples:

.. code-block:: bash

    # Update the build of the `test` machine
    docknv machine build test

    # Update the build of the `test` machine without pushing it to the local registry
    docknv machine build test --do-not-push

    # Rebuild the `test` machine without cache
    docknv machine build test --no-cache


machine freeze [EXPERIMENTAL]
+++++++++++++++++++++++++++++

Freeze a machine, by packing linked static volumes inside of the Dockerfile.
This allows for quick development cycle and ready-to-use Dockerfile for Swarm deployment (for example).

Example:

.. code-block:: bash

    # Freeze the `test` machine
    docknv machine freeze test


Configuration commands
----------------------

config status
+++++++++++++

Show the current configuration for the project.

Example:

.. code-block:: bash

    # Show the current configuration name
    docknv config status


config ls
+++++++++

List the available configurations for the project.

Example:

.. code-block:: bash

    # List the available configurations
    docknv config ls


config use
++++++++++

Set a configuration as active for the project.

Example:

.. code-block:: bash

    # Define the `standard` configuration as current
    docknv config use standard


config start
++++++++++++

Start the machines from the active configuration. You can start these machines in the foreground if needed (*--foreground*).

Examples:

.. code-block:: bash

    # Start the current configuration in background (default)
    docknv config start

    # Start the current configuration in foreground
    docknv config start --foreground


config restart
++++++++++++++

Restart the machines from the active configuration. You can restart these machines in the foreground if needed (*--foreground*), and you can *force* the restart by stopping and starting (*-f/--force*).

Examples:

.. code-block:: bash

    # Restart the current configuration
    docknv config restart

    # Force restart the current configuration and put in foreground
    docknv config restart --foreground -f # or --force


config stop
+++++++++++

Stop the machines from the active configuration.

Example:

.. code-block:: bash

    # Stop the current configuration
    docknv config stop


config ps
+++++++++

Get the machine statuses from the active configuration.

Example:

.. code-block:: bash

    # Get the machine statuses
    docknv config ps


config unset
++++++++++++

Unset the current configuration.

Example:

.. code-block:: bash

    # Unset the current configuration
    docknv config unset


config build
++++++++++++

Build the machines from the active configuration. As for the `machine build`, you can build without pushing to the local registry (*--do-not-push*), and rebuild without cache (*--no-cache*).

Examples:

.. code-block:: bash

    # Build the current configuration
    docknv config build

    # Build the current configuration without pushing to the local registry
    docknv config build --do-not-push

    # Rebuild the current configuration without cache
    docknv config build --no-cache


config create
+++++++++++++

config update
+++++++++++++

config set-schema
+++++++++++++++++

config set-env
++++++++++++++

config rm
+++++++++

Bundle commands
---------------

bundle start
++++++++++++

bundle restart
++++++++++++++

bundle stop
+++++++++++

bundle ps
+++++++++

bundle build
++++++++++++

Environment commands
--------------------

env ls
++++++

env show
++++++++

env use
+++++++

Schema commands
---------------

schema ls
+++++++++

Volume commands
---------------

volume ls
+++++++++

volume rm
+++++++++

User commands
-------------

user clean
++++++++++

user rm-lock
++++++++++++

Scaffold commands
-----------------

scaffold project
++++++++++++++++

scaffold image
++++++++++++++

scaffold env
++++++++++++

Registry commands
-----------------

registry start
++++++++++++++

registry stop
+++++++++++++
